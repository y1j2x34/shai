name: Release

on:
  push:
    tags:
    - '*'

defaults:
  run:
    shell: bash

jobs:
  prerelease:
    runs-on: ubuntu-latest

    outputs:
      value: ${{ steps.prerelease.outputs.value }}

    steps:
    - name: Prerelease Check
      id: prerelease
      run: |
        if [[ ${{ github.ref_name }} =~ ^[0-9]+[.][0-9]+[.][0-9]+$ ]]; then
            echo value=false >> $GITHUB_OUTPUT
        else
            echo value=true >> $GITHUB_OUTPUT
        fi

  package:
    strategy:
      matrix:
        target:
        - aarch64-apple-darwin
        - aarch64-unknown-linux-musl
        - arm-unknown-linux-musleabihf
        - armv7-unknown-linux-musleabihf
        - x86_64-apple-darwin
        - x86_64-pc-windows-msvc
        - aarch64-pc-windows-msvc
        - x86_64-unknown-linux-musl
        include:
        - target: aarch64-apple-darwin
          os: macos-latest
          target_rustflags: ''
        - target: aarch64-unknown-linux-musl
          os: ubuntu-latest
          target_rustflags: '--codegen linker=aarch64-linux-gnu-gcc'
        - target: arm-unknown-linux-musleabihf
          os: ubuntu-latest
          target_rustflags: '--codegen linker=arm-linux-gnueabihf-gcc'
        - target: armv7-unknown-linux-musleabihf
          os: ubuntu-latest
          target_rustflags: '--codegen linker=arm-linux-gnueabihf-gcc'
        - target: x86_64-apple-darwin
          os: macos-latest
          target_rustflags: ''
        - target: x86_64-pc-windows-msvc
          os: windows-latest
        - target: aarch64-pc-windows-msvc
          os: windows-latest
          target_rustflags: ''
        - target: x86_64-unknown-linux-musl
          os: ubuntu-latest
          target_rustflags: ''

    runs-on: ${{matrix.os}}

    needs:
    - prerelease

    steps:
    - uses: actions/checkout@v4
    - name: Install musl-gcc
      if: ${{ matrix.target == 'x86_64-unknown-linux-musl' }}
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools
    - name: Install AArch64 Toolchain
      if: ${{ matrix.target == 'aarch64-unknown-linux-musl' }}
      run: |
        sudo apt-get update
        sudo apt-get install gcc-aarch64-linux-gnu libc6-dev-i386

    - name: Install ARM Toolchain and OpenSSL
      if: ${{ matrix.target == 'arm-unknown-linux-musleabihf' || matrix.target == 'armv7-unknown-linux-musleabihf' }}
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools libssl-dev
        # Install cross-compiler for ARM
        sudo apt-get install -y gcc-arm-linux-gnueabihf
        # Install dependencies for OpenSSL compilation
        sudo apt-get install -y make perl

        # Download and build musl-cross-make
        git clone https://github.com/richfelker/musl-cross-make.git
        cd musl-cross-make
        echo "TARGET = armv7l-linux-musleabihf" > config.mak
        echo "OUTPUT = /usr/local/musl" >> config.mak
        make -j$(nproc)
        sudo make install
        cd ..

        # Download and cross-compile OpenSSL
        wget https://www.openssl.org/source/openssl-1.1.1w.tar.gz
        tar xf openssl-1.1.1w.tar.gz
        cd openssl-1.1.1w
        
        # Configure OpenSSL for ARM with musl
        export CC=/usr/local/musl/bin/armv7l-linux-musleabihf-gcc
        export AR=/usr/local/musl/bin/armv7l-linux-musleabihf-ar
        export RANLIB=/usr/local/musl/bin/armv7l-linux-musleabihf-ranlib
        
        ./Configure linux-generic32 no-shared \
          --prefix=/usr/local/musl/armv7l-linux-musleabihf \
          --openssldir=/usr/local/musl/armv7l-linux-musleabihf/openssl \
          -static
        
        make -j$(nproc)
        sudo make install_sw
        cd ..

        # Set environment variables for cross-compilation
        echo "OPENSSL_DIR=/usr/local/musl/armv7l-linux-musleabihf" >> $GITHUB_ENV
        echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
        echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=/usr/local/musl/armv7l-linux-musleabihf/lib/pkgconfig" >> $GITHUB_ENV
        echo "OPENSSL_INCLUDE_DIR=/usr/local/musl/armv7l-linux-musleabihf/include" >> $GITHUB_ENV
        echo "OPENSSL_LIB_DIR=/usr/local/musl/armv7l-linux-musleabihf/lib" >> $GITHUB_ENV

    - name: Install AArch64 Toolchain (Windows)
      if: ${{ matrix.target == 'aarch64-pc-windows-msvc' }}
      run: |
        rustup target add aarch64-pc-windows-msvc

    - name: Generate Completion Scripts and Manpage
      run: |
        set -euxo pipefail
        cargo build

    - name: Package
      id: package
      env:
        TARGET: ${{ matrix.target }}
        REF: ${{ github.ref }}
        OS: ${{ matrix.os }}
        TARGET_RUSTFLAGS: ${{ matrix.target_rustflags }}
      run: ./bin/package
      shell: bash

    - name: Publish Archive
      uses: softprops/action-gh-release@v2.1.0
      if: ${{ startsWith(github.ref, 'refs/tags/') }}
      with:
        draft: false
        files: ${{ steps.package.outputs.archive }}
        prerelease: ${{ needs.prerelease.outputs.value }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    # - name: Publish Changelog
    #   uses: softprops/action-gh-release@v2.1.0
    #   if: >-
    #     ${{
    #       startsWith(github.ref, 'refs/tags/')
    #       && matrix.target == 'x86_64-unknown-linux-musl'
    #     }}
    #   with:
    #     draft: false
    #     files: CHANGELOG.md
    #     prerelease: ${{ needs.prerelease.outputs.value }}
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  checksum:
    runs-on: ubuntu-latest

    needs:
    - package
    - prerelease

    steps:
    - name: Download Release Archives
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: >-
        gh release download
        --repo y1j2x34/shai
        --pattern '*'
        --dir release
        ${{ github.ref_name }}

    - name: Create Checksums
      run: |
        cd release
        shasum -a 256 * > ../SHA256SUMS

    - name: Publish Checksums
      uses: softprops/action-gh-release@v2.1.0
      with:
        draft: false
        files: SHA256SUMS
        prerelease: ${{ needs.prerelease.outputs.value }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
